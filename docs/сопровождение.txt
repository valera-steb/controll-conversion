как разбить СУ на S и SU, где
  S - система управления, которая сама ОУ
  SU - прикладная концепция - конкретная для данного ОУ.
=> плохие названия, сути не выражают.

+ например, нужен список стереотипов. Этот список, часть
 большего объекта - какого?

 .есть конкретный стереотип, который цепляеться на ОУ в нужной
 ему части и мониторит ситуацию - он часть прикладной концепции

=>
 App - Application - приложение, приложение концепции
    хотелось - прикладная концепция.
 SI - System Infrastructure - инфраструктура концепции

=> Выходит 2 сущности:
 App - описывает прикладную концепцию, при этом:
   .использует архитектуру созданную SI
   .и для работы, прикладной внутренности архитектуры
   не должны быть видны, её UI не нужен.

 SI  - создаёт инфраструктуру, однако:
   .есть желание увидеть её внутренности.
   .UI есть отдельная вещь, о которой App:
     .знать не должен,
     .влияние на себе не испытывать.

.далее:
  .цели и компараторы с ними
  + кто будет заполнять поле ошибки?:
    .компаратор.
    .цфу.
    .вместе.

.цели:
  .каждая цель строиться над каким-либо стереотипом.
  .однако, для компаратора могут потребоваться значения
  разных стереотипов.
  + вопрос о том, стоит ли строить цель над множеством
  стереотипов.

  .целепологание происходит относительно фактора.
  .однако, фактор может быть оценен разными стереотипами.
  .и тогда над каждый стереотипом встанет своя цель.
  =>? деффективность ли это (вектора целей),
    .ведь один фактор порождает несколько целей
    в зависимоти от восприятия.

.текущая статистика:
  .9 файлов прикладной концепции.
  .6 файлов инфраструктуры.
  .4 файла ОУ (в которых ранее умещалось управление).
+ прогноз:
  .+3 (12) файлов прикладной концепции.
  .~2 (8)  файлов инфраструктуры.
  .+0 (4)  файла ОУ.

.решение:
  .пока все параметры состояния считаю контрольными
  т.е. изменение любого ставит задачу на выработку
  управляющего воздействия.

.далее:
  .StateController и FunctionLauncher.
  .а потом ControlImpactApplier.

+ далее:
  .написать пару цфу:
    .отобразить.
    .прикрепить к целям.
    + подсветка активной.
  .добавить в FunctionLauncher запуск цфу.
  .заняться ControlImpactApplier-ом.

--------------------
.следующая итерация
  .усложнения (задача_01):
    .добавить UI сервера.
      .кнопка ответа на запрос.
      .кнопка на подтверждение отмены запроса.
      .кнопка блокировки сервера.

    .добавить в UI клиента кнопку отмены.

    .подрисовать оформление.

  + следующий шаг - модификация су:
    .ПФУ на кнопку отмены.

    .ПФУ на падение сервера.
    + модификация ОУ.

.как должна выглядеть нативная реализация?
  .с учётом перехода в режим пингования?
  .какие есть ответственности и как они разпределяються?

  .добавить пингера, который будет использовать Requester-а,
  активироваться по сбою в запросе (Requester-ом)
  UI отслеживать его состояние и сообщение отображать

  .стоит ли усложнять модель, либо отсеч на уровне UI?
  (я про работу пингера, и что когда он активен
   запросы не пропускаем)

.пожелание:
  .индекс в корне - должен работать на нативной реализации с подгрузкой СУ в режиме наблюдателя.
  .индекс в concept - работать на СУ, без нативной реализации.

.конфликт:
  .модель_сервера - не есть частью ОУ.
  .но часть чего она?
  .в ОУ нужен интерфейс к моделе_сервера.
  .а сама модель - необходимое условие для работы. Вообще, она часть среды.
  !!!ключевой вопрос - кто за неё отвечает?
    .либо иная трактовка - как за неё отвечает СУ?
    .и тут-же: а каков вообще его уровень ответственности, и кто кроме него существует?
      .ведь есть ещё процесс инициализации, которым СУ не управляет.
  .т.е. за модель_сервера отвечает "инициализатор", и к моменту введения СУ в игру, модель уже есть.