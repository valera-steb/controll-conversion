работы с графами.
и так нужны:
  .базовый класс - по входным данным строит вызовы.
    .входные данные: состояния, события, валидаторы, переходы.
      .в переходах, первое состояние - стартовое, на него сброс происходит.
  .подписка - на переход, вход, выход.
  .контроллер вызовов.
    .в минимальной реализации следит, что-бы при вызове события
    во время обработки события оно запускалось после выхода из текущего
    события.

по частям:
		{
            state: {current:_, pred:_},
            params: {},
            actions: {},
            error: _,
            subscribe: {onEnter, onLeave, onTransit},
            reset: f
		}
.базовый класс:
  .должен обеспечить работу с контроллером.
  .должен заполнить объект actions.
  .action в себе должен:
    .опросить контроллер на предмет очереди:
      .не первый - поставить себя в очередь, выйти.
    .контроллеру сказать что работает.
    .проверить допустимость перехода.
    .вызвать валидатор:
      .при сбое - выставить ошибку, закончить.
    .поменять состояние.
    .контроллеру сказать, что закончил.


  .вызов экшена должен:
    .проверить, что у текущего состояния данное действие допустимо.

    .получить детали текущего состояния.
    .просмотреть методы выходные.
    .если есть наш - вызвать выполнение с его деталями.

  .т.е. нужно знать:
    .имя вызываемого метода.
    .текущее состояние.
    .граф переходов, и уметь его фильтровать.