добавил компоненты кнокаута. Как с ними быть?
  .учитывая, что:
    .вив модель компонента отделена от целого. Т.е. проброс в родителя зделать можно,
    но выглядет он странно.
    .т.е. по компонентам должны гулять выделенные части модели данных
    а вивМодель своего дерева не выстраивает, и нельзя к нему будет обратиться на прямую.
  .следствия:
    .отказ от прямых вызовово вивМодели, и её "наблюдаемости" выходит отсекает её из
    управленческого подхода, т.е. эти модели становяться сами по себе.
    .хотя можно вивМодель подставлять свою, но пропадает завидное соответствие между кодом и разметкой.
  .пожелания:
    .использовать компоненты, с рекомендуемым форматом - когда компонент подгружает зависимостью свою разметку,
    а регистрация идёт через файл модели компонента.
    .сделать доступным интерфейс компонента - по идее просто - передать функцию регистрации,
    т.е. на входе у компонента 3 вещи:
      .данные - которые отображаем.
      .функция регистрации - которая добавляет интерфейс компонента в дерево при создании компонента.
      .настройки отображения.
    + при этом, вивМодель, которая использует компонент должна уметь его регестрировать, возможно разными методами.
    .тогда и динамически выбирать какой компонент прицепить можно.
  .однако:
    .проблема "текучей" инициализации. Т.е.
      .ранее - при создании модели внутри неё ею же и дочерними моделями можно было пользоваться.
      .теперь:
        .коомпонентами можно пользоваться только после их регистрации.
        .при регистрации соответственно подписка происходит.
        .потенциально существует выгрузка компонента, по которой по идее выкинуть всё надо-бы.
    +?:
      .может ограниченно испольвать компоненты.
      .а с другой стороны - как раз в процессе регистрации можно разные части подтянуть.
  + компоненты должны зависить только от данных им передаваемых, не более того.
    .другими словами, если есть внешние события их:
      .либо вписать в переданные данные.
      .либо прокинуть обратно интерфес про них.



.как встроить граф/автомат_на_графе?
  .требования:
    .наличие графа переходов, который можно извлеч и проанализировать.
    .вызов экшена:
      .в него может быть передан параметр.
      .он валидирует вызов себя по текущему состоянию и переходам.
      .закидывает параметры и устанавливает новое состояние.
    .наличие внутренних подписок - что-то меняют внутри графа по переходам.




описание интерфейсов к конкретным частям:
.возможности:
  .вариант названия: xToY, xFromY.
  .варианты внутри: to, from.

.трактовки:
  .xToY:
    .to - что х может вызвать на Y.
    .from - Y может вызвать на x.

  .xFromY: - превращаеться в yToX
    .to - Y может вызвать на x.
    .from - х может вызвать на Y.

.по умолчанию, без to/from объявление считаеться to.











































